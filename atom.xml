<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>随跑者</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-28T03:03:53.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Sincan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IOS 适配器模式</title>
    <link href="http://yoursite.com/2017/04/28/IOS-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/04/28/IOS-适配器模式/</id>
    <published>2017-04-28T03:02:52.000Z</published>
    <updated>2017-04-28T03:03:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、适配器模式简介"><a href="#一、适配器模式简介" class="headerlink" title="一、适配器模式简介"></a>一、适配器模式简介</h2><p>将一个类的接口转换成客户端希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p>
<h2 id="二、何时使用适配器模式"><a href="#二、何时使用适配器模式" class="headerlink" title="二、何时使用适配器模式"></a>二、何时使用适配器模式</h2><ul>
<li>已有类的接口与需求不匹配</li>
<li>想要一个可复用的类，该类能够同可能带有不兼容接口的其他类协作。</li>
<li>需要适配一个类的几个不同子类，可是让每一个子类去子类化一个类适配器又不现实。</li>
</ul>
<h2 id="三、适配器的实现方式"><a href="#三、适配器的实现方式" class="headerlink" title="三、适配器的实现方式"></a>三、适配器的实现方式</h2><p>适配器的实现方式一共有2种：</p>
<p><code>类适配器</code>：通过继承来适配接口）。</p>
<p><code>对象适配器</code>：通过引用来适配接口。</p>
<h2 id="四、类适配器与对象适配器的区别"><a href="#四、类适配器与对象适配器的区别" class="headerlink" title="四、类适配器与对象适配器的区别"></a>四、类适配器与对象适配器的区别</h2><ul>
<li>适配类个数不一样：<code>类适配器</code>是针对一个类适配，<code>对象适配器</code>是针对多个类及其子类适配。</li>
<li>重载适配类：<code>类适配器</code>易于重载（因为继承），<code>对象适配器</code>没法重载适配类行为（因为引用）。</li>
<li>额外的指针开销：<code>类适配器</code>没有额外的开销，<code>对象适配器</code>需要额外的指针开销来访问适配类的行为。</li>
</ul>
<h2 id="五、具体实现"><a href="#五、具体实现" class="headerlink" title="五、具体实现"></a>五、具体实现</h2><p>Adaptee类，这里的作为被适配类，其中需要被适配的接口<code>specificRequest</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (void)specificRequest &#123;</div><div class="line">NSLog(@&quot;%s&quot;,__FUNCTION__);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>&lt;Target&gt;</code>协议，作为客户端所希望的接口抽象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@protocol Target &lt;NSObject&gt;</div><div class="line"></div><div class="line">- (void)request;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>类适配器ClassAdapter继承Adaptee类并重载<code>&lt;Target&gt;</code>协议的request方法。并在request方法中实现Adaptee的specificRequest方法。由于是继承关系，这种方式的优点（可以重写Adaptee的specificRequest方法）和缺点（只能针对一个被适配类）就更加突出。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//  ClassAdapter.h</div><div class="line">@interface ClassAdapter : Adaptee &lt;Target&gt; </div><div class="line">@end</div><div class="line"></div><div class="line">//  ClassAdapter.m</div><div class="line">@implementation ClassAdapter</div><div class="line"></div><div class="line">- (void)request &#123;</div><div class="line">NSLog(@&quot;%s&quot;,__FUNCTION__);</div><div class="line">[self specificRequest];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)specificRequest &#123;</div><div class="line">NSLog(@&quot;%s&quot;,__FUNCTION__);</div><div class="line">[super specificRequest];</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>而对象适配器ObjectAdapter仅仅重载<code>&lt;Target&gt;</code>协议的request方法。在如何实现Adaptee的specificRequest方法的方式上，跟类适配器的方式完全不同，对象适配器是同过引用方式来实现的，这种方式跟对象适配器方式需要额外的指针开销。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//  ObjectAdapter.m</div><div class="line">@interface ObjectAdapter ()</div><div class="line">@property (nonatomic, strong) Adaptee *adaptee;</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ObjectAdapter</div><div class="line"></div><div class="line">- (instancetype)init &#123;</div><div class="line">self = [super init];</div><div class="line">if (self) &#123;</div><div class="line">_adaptee = [[Adaptee alloc] init];</div><div class="line">&#125;</div><div class="line">return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)request &#123;</div><div class="line">NSLog(@&quot;%s&quot;,__FUNCTION__);</div><div class="line">[_adaptee specificRequest];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>区分是哪种适配器模式，只要看适配器类的实现方式就可以区分（继承：类适配器模式，引用：对象适配器模式）。在选择到底使用哪种适配器模式时，可以根据继承和引用的特性来决定当下哪种更加适合使用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、适配器模式简介&quot;&gt;&lt;a href=&quot;#一、适配器模式简介&quot; class=&quot;headerlink&quot; title=&quot;一、适配器模式简介&quot;&gt;&lt;/a&gt;一、适配器模式简介&lt;/h2&gt;&lt;p&gt;将一个类的接口转换成客户端希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能
    
    </summary>
    
      <category term="IOS设计模式" scheme="http://yoursite.com/categories/IOS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo 添加Disqus评论功能</title>
    <link href="http://yoursite.com/2017/04/19/Hexo-%E6%B7%BB%E5%8A%A0Disqus%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/"/>
    <id>http://yoursite.com/2017/04/19/Hexo-添加Disqus评论功能/</id>
    <published>2017-04-18T17:18:36.000Z</published>
    <updated>2017-04-18T17:37:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo默认支持Disqus评论功能，基本上只有在根目录的配置文件<code>_config.yml</code>，上添加支持就可以了，但更多步骤却在Disqus配置上。</p>
<h2 id="注册Disqus账号"><a href="#注册Disqus账号" class="headerlink" title="注册Disqus账号"></a>注册Disqus账号</h2><p>到<a href="http://disqus.com" target="_blank" rel="external">官网</a>上注册账号。</p>
<h2 id="配置Disqus"><a href="#配置Disqus" class="headerlink" title="配置Disqus"></a>配置Disqus</h2><p>1、在首页，右侧功能栏最底部点击<code>Add Disqus to you site</code>。</p>
<p><img src="http://7xwa19.com1.z0.glb.clouddn.com/Disqus%20add.png" alt="disqus add"></p>
<p>2、进入设置shortname，输入框中WebsitName的内容就是shortname，填写对应信息后，下一步。<br><img src="http://7xwa19.com1.z0.glb.clouddn.com/Disqus%20name.png" alt="disqus url"></p>
<p>3、最后一步要填写网站的URL。<br><img src="http://7xwa19.com1.z0.glb.clouddn.com/Disqus%20url.png" alt="disqus url"></p>
<h2 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h2><p>修改根目录的<code>_config.yml</code>文件，添加以下内容。其中<code>&lt;shortname&gt;</code>改成自己填写的shortname。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">disqus_shortname: &lt;shortname&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo默认支持Disqus评论功能，基本上只有在根目录的配置文件&lt;code&gt;_config.yml&lt;/code&gt;，上添加支持就可以了，但更多步骤却在Disqus配置上。&lt;/p&gt;
&lt;h2 id=&quot;注册Disqus账号&quot;&gt;&lt;a href=&quot;#注册Disqus账号&quot; class
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Page 绑定个人域名</title>
    <link href="http://yoursite.com/2017/04/17/GitHub-Page-%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/"/>
    <id>http://yoursite.com/2017/04/17/GitHub-Page-绑定个人域名/</id>
    <published>2017-04-16T18:14:39.000Z</published>
    <updated>2017-04-16T18:15:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>在GitHub上通过Hexo创建了自己的静态博客，但在网址还是带有GitHub的域名，这样还不够酷，最好就是有自己独特域名。下面就教大家如何让自己博客与自己的域名捆绑一起。<code>sincan.github.io</code>是我GitHub上博客的域名。<code>youwillbe.top</code> 是我购买的域名，相应配置修改为自己的域名。</p>
<h2 id="1、购买个人域名"><a href="#1、购买个人域名" class="headerlink" title="1、购买个人域名"></a>1、购买个人域名</h2><p><a href="http://www.godaddy.com/" target="_blank" rel="external">狗爹</a>和<a href="http://www.aliyun.com" target="_blank" rel="external">阿里云</a>上都可以购买域名。建议去狗爹上买，有<a href="https://www.dute.me/" target="_blank" rel="external">优惠码</a>这个理由已经够充足了。购买域名后，到域名管理后台修改DNS服务器为<code>f1g1ns1.dnspod.net</code>和<code>f1g1ns2.dnspod.net</code>（以DNSPod为域名解析来做例子）。</p>
<h2 id="2、添加CNAME文件"><a href="#2、添加CNAME文件" class="headerlink" title="2、添加CNAME文件"></a>2、添加CNAME文件</h2><p>在你的个人博客仓库的根目录中新建文件CNAME（注意没有后缀）。并输入内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">youwillbe.top</div></pre></td></tr></table></figure>
<h2 id="3、DNS解析"><a href="#3、DNS解析" class="headerlink" title="3、DNS解析"></a>3、DNS解析</h2><p><a href="https://www.dnspod.cn" target="_blank" rel="external">DNSPod</a>免费域名解析，不怕被墙。注册完成后，点击添加域名<code>youwillbe.top</code>,然后添加记录，具体如下图所示，其中<code>192.30.252.153</code>和<code>192.30.252.154</code>是Github Pages服务器指定的IP地址，访问该IP地址即表示访问Github Pages。</p>
<p><img src="http://7xwa19.com1.z0.glb.clouddn.com/DNS1.png" alt="dns"></p>
<h2 id="4、等待生效"><a href="#4、等待生效" class="headerlink" title="4、等待生效"></a>4、等待生效</h2><p>设置完成后，等待几分钟，然后就可以在浏览器上输入自己的个性域名，并看到自己的博客了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在GitHub上通过Hexo创建了自己的静态博客，但在网址还是带有GitHub的域名，这样还不够酷，最好就是有自己独特域名。下面就教大家如何让自己博客与自己的域名捆绑一起。&lt;code&gt;sincan.github.io&lt;/code&gt;是我GitHub上博客的域名。&lt;code&gt;y
    
    </summary>
    
      <category term="GitHub" scheme="http://yoursite.com/categories/GitHub/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo 部署GitHub repository</title>
    <link href="http://yoursite.com/2017/04/16/Hexo-%E9%83%A8%E7%BD%B2GitHub-repository/"/>
    <id>http://yoursite.com/2017/04/16/Hexo-部署GitHub-repository/</id>
    <published>2017-04-16T15:23:45.000Z</published>
    <updated>2017-04-16T15:29:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>执行命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>修改根目录下的<code>_config.yml</code>，具体内容如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: &lt;repository url&gt;</div></pre></td></tr></table></figure>
<p>其中<code>&lt;repository url&gt;</code>为GitHub上的repository。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;配置环境&quot;&gt;&lt;a href=&quot;#配置环境&quot; class=&quot;headerlink&quot; title=&quot;配置环境&quot;&gt;&lt;/a&gt;配置环境&lt;/h2&gt;&lt;p&gt;执行命令&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 添加分类和标签</title>
    <link href="http://yoursite.com/2017/04/16/Hexo-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE/"/>
    <id>http://yoursite.com/2017/04/16/Hexo-添加分类和标签/</id>
    <published>2017-04-15T17:36:50.000Z</published>
    <updated>2017-04-18T17:20:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、让分类和标签功能生效"><a href="#1、让分类和标签功能生效" class="headerlink" title="1、让分类和标签功能生效"></a>1、让分类和标签功能生效</h2><p><strong>分类功能生效</strong></p>
<p>执行命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new page &quot;categories&quot;</div></pre></td></tr></table></figure>
<p>修改<code>source/categories/index.md</code>中，<code>title</code>字段改为<code>layout</code>。保留<code>date</code>字段和值，添加<code>type: &quot;categories&quot;</code>,其他字段可删除，最终效果可参考下面效果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">layout: categories</div><div class="line">date: 2017-04-16 01:44:30</div><div class="line">type: &quot;categories&quot;</div><div class="line">   comments: false</div><div class="line">---</div></pre></td></tr></table></figure>
<p><strong>标签功能生效</strong></p>
<p>执行命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new page &quot;tags&quot;</div></pre></td></tr></table></figure>
<p>修改<code>source/tags/index.md</code>中，<code>title</code>字段改为<code>layout</code>。保留<code>date</code>字段和值，添加<code>type: &quot;tags&quot;</code>,其他字段可删除，最终效果可参考下面效果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">layout: tags</div><div class="line">date: 2017-04-16 01:44:30</div><div class="line">type: &quot;tags&quot;</div><div class="line">   comments: false</div><div class="line">---</div></pre></td></tr></table></figure>
<h2 id="2、文章添加分类与标签"><a href="#2、文章添加分类与标签" class="headerlink" title="2、文章添加分类与标签"></a>2、文章添加分类与标签</h2><p><strong>第一种方法</strong>，针对已存在的文章，头部<code>date</code>字段下增加以下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">categories:</div><div class="line">tags:</div></pre></td></tr></table></figure>
<p><code>categories</code>为分类名称，如果多个分类用<code>[分类1，分类2]</code>。</p>
<p><code>tags</code>为标签名称，如果多个便签用<code>[标签1，便签2]</code></p>
<p>最终效果如下面：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">title: 标题名称</div><div class="line">date: 2017-04-16 01:36:50</div><div class="line">categories: 分类名称</div><div class="line">tags: [标签名1，便签名2]</div></pre></td></tr></table></figure>
<p><strong>第二种方法</strong>，为方便不用每次都手动添加<code>categories</code>和<code>tags</code>，可以修改<code>scaffolds/post.md</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: &#123;&#123; title &#125;&#125;</div><div class="line">date: &#123;&#123; date &#125;&#125;</div><div class="line">categories:</div><div class="line">tags:</div><div class="line">---</div></pre></td></tr></table></figure>
<p>这样的话，当新建文章时将自动添加<code>categories</code>和<code>tags</code>。</p>
<p>PS：发现<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">yilia</a>主题中的分类标签中，如果是多个分类的话，第一个分类可以执行，第二个分类会读取不到文件报错<code>Cannot GET categories/XXXXXX</code>。为了大家都可以顺利添加，建议用默认的主题测试。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、让分类和标签功能生效&quot;&gt;&lt;a href=&quot;#1、让分类和标签功能生效&quot; class=&quot;headerlink&quot; title=&quot;1、让分类和标签功能生效&quot;&gt;&lt;/a&gt;1、让分类和标签功能生效&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;分类功能生效&lt;/strong&gt;&lt;/p&gt;
&lt;p
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 添加RSS订阅</title>
    <link href="http://yoursite.com/2017/04/15/Hexo-%E6%B7%BB%E5%8A%A0RSS%E8%AE%A2%E9%98%85/"/>
    <id>http://yoursite.com/2017/04/15/Hexo-添加RSS订阅/</id>
    <published>2017-04-15T15:47:17.000Z</published>
    <updated>2017-04-16T12:39:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、安装插件"><a href="#1、安装插件" class="headerlink" title="1、安装插件"></a>1、安装插件</h2><p>终端执行命令。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-feed --save</div></pre></td></tr></table></figure>
<h2 id="2、网站添加RSS支持"><a href="#2、网站添加RSS支持" class="headerlink" title="2、网站添加RSS支持"></a>2、网站添加RSS支持</h2><p>编辑网站根目录下的<code>_config.yml</code>,添加以下代码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># RSS订阅支持</div><div class="line">plugin:</div><div class="line">- hexo-generator-feed</div><div class="line"></div><div class="line"># Feed Atom</div><div class="line">feed:</div><div class="line">type: atom</div><div class="line">path: atom.xml</div><div class="line">limit: 20</div></pre></td></tr></table></figure>
<h2 id="3、主题添加RSS支持"><a href="#3、主题添加RSS支持" class="headerlink" title="3、主题添加RSS支持"></a>3、主题添加RSS支持</h2><p>编辑主题的<code>_config.yml</code>，路径为<code>themes/&lt;主题名称&gt;/_config.yml</code>，以下是<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">yilia</a>主题的修改方法,具体方法请查阅各自主题修改方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">subnav:</div><div class="line">rss: &quot;/atom.xml&quot;</div></pre></td></tr></table></figure>
<h2 id="4、生成RSS"><a href="#4、生成RSS" class="headerlink" title="4、生成RSS"></a>4、生成RSS</h2><p>终端执行命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、安装插件&quot;&gt;&lt;a href=&quot;#1、安装插件&quot; class=&quot;headerlink&quot; title=&quot;1、安装插件&quot;&gt;&lt;/a&gt;1、安装插件&lt;/h2&gt;&lt;p&gt;终端执行命令。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>ssh key 创建与使用</title>
    <link href="http://yoursite.com/2017/04/14/ssh-key-%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/04/14/ssh-key-创建与使用/</id>
    <published>2017-04-14T10:15:45.000Z</published>
    <updated>2017-04-16T12:40:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生成ssh-key"><a href="#生成ssh-key" class="headerlink" title="生成ssh key"></a>生成ssh key</h2><p>1、终端输入命令。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C &quot;邮箱&quot;</div></pre></td></tr></table></figure>
<p>2、下面信息是询问是否修改文件名和路径，一般都是用默认的，直接回车跳到下一步。</p>
<p><img src="http://7xwa19.com1.z0.glb.clouddn.com/ssh1.png" alt="1"></p>
<p>3、下面是询问是否添加密码，一般都是用默认，直接回车。</p>
<p><img src="http://7xwa19.com1.z0.glb.clouddn.com/ssh3.png" alt="2"></p>
<p>4、再次输入密码。如果没有就直接回车。</p>
<p><img src="http://7xwa19.com1.z0.glb.clouddn.com/ssh2.png" alt="3"></p>
<p>5、最终显示类似一下信息</p>
<p><img src="http://7xwa19.com1.z0.glb.clouddn.com/ssh4.png" alt="4"></p>
<p>以上这样就生成一个ssh key了。。</p>
<h2 id="查看ssh-key-信息"><a href="#查看ssh-key-信息" class="headerlink" title="查看ssh key 信息"></a>查看ssh key 信息</h2><p>终端输入命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cat ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure>
<p>如果<a href="http://git.oschina.net/" target="_blank" rel="external">oschina</a>或者<a href="https://github.com" target="_blank" rel="external">GitHub</a>上需要添加SSH，其中的ssh Value值就是命令返回的信息，具体会显示类似于下面的信息。</p>
<p><img src="http://7xwa19.com1.z0.glb.clouddn.com/ssh5.png" alt="5"></p>
<h2 id="多个ssh-key使用"><a href="#多个ssh-key使用" class="headerlink" title="多个ssh key使用"></a>多个ssh key使用</h2><p>有时会出现这样的情况，oschina和GitHub分别用不同的ssh key，面对这种情况要如何才能做到呢？下面我们就把这问题给解决了。</p>
<p>1、按照上面的步骤生成第一个ssh key。如果已经生成，跳到下一步。</p>
<p>2、按照“生成ssh key”的步骤，到第二步时，这里不再是回车，而是填入具体的路径，这里可以输入以下内容并执行（只要路径相同，名称跟第一个不一致就可以）。后面步骤不变。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ /Users/&lt;用户名&gt;/.ssh/second_id_rsa</div></pre></td></tr></table></figure>
<p>3、在终端输入命令，意思是在.ssh文件夹下创建config文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd ~/.ssh/</div><div class="line">$ touch config</div></pre></td></tr></table></figure>
<p>4、打开config，复制以下信息填入config文件。其中注意HostName和IdentityFile，分别是填入对应的信息。这里第一个是GitHub的配置，第二个是oschina的配置。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#github配置</div><div class="line">Host github.com</div><div class="line">    HostName github.com</div><div class="line">    IdentityFile ~/.ssh/id_rsa</div><div class="line">    User git</div><div class="line">#gitoschina的配置</div><div class="line">Host git.oschina.net</div><div class="line">    HostName git.oschina.net</div><div class="line">    IdentityFile ~/.ssh/second_id_rsa</div><div class="line">    User git</div></pre></td></tr></table></figure>
<p>5、测试GitHub，如果正常会返回成功的信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure>
<p>6、测试oschina，如果正常会返回成功的信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@git.oschina.net</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;生成ssh-key&quot;&gt;&lt;a href=&quot;#生成ssh-key&quot; class=&quot;headerlink&quot; title=&quot;生成ssh key&quot;&gt;&lt;/a&gt;生成ssh key&lt;/h2&gt;&lt;p&gt;1、终端输入命令。&lt;/p&gt;
&lt;figure class=&quot;highlight pla
    
    </summary>
    
      <category term="SSH" scheme="http://yoursite.com/categories/SSH/"/>
    
    
      <category term="ssh" scheme="http://yoursite.com/tags/ssh/"/>
    
  </entry>
  
</feed>
