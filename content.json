[{"title":"IOS 适配器模式","date":"2017-04-28T03:02:52.000Z","path":"2017/04/28/IOS-适配器模式/","text":"一、适配器模式简介将一个类的接口转换成客户端希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。 二、何时使用适配器模式 已有类的接口与需求不匹配 想要一个可复用的类，该类能够同可能带有不兼容接口的其他类协作。 需要适配一个类的几个不同子类，可是让每一个子类去子类化一个类适配器又不现实。 三、适配器的实现方式适配器的实现方式一共有2种： 类适配器：通过继承来适配接口）。 对象适配器：通过引用来适配接口。 四、类适配器与对象适配器的区别 适配类个数不一样：类适配器是针对一个类适配，对象适配器是针对多个类及其子类适配。 重载适配类：类适配器易于重载（因为继承），对象适配器没法重载适配类行为（因为引用）。 额外的指针开销：类适配器没有额外的开销，对象适配器需要额外的指针开销来访问适配类的行为。 五、具体实现Adaptee类，这里的作为被适配类，其中需要被适配的接口specificRequest。 123- (void)specificRequest &#123;NSLog(@&quot;%s&quot;,__FUNCTION__);&#125; &lt;Target&gt;协议，作为客户端所希望的接口抽象。 12345@protocol Target &lt;NSObject&gt;- (void)request;@end 类适配器ClassAdapter继承Adaptee类并重载&lt;Target&gt;协议的request方法。并在request方法中实现Adaptee的specificRequest方法。由于是继承关系，这种方式的优点（可以重写Adaptee的specificRequest方法）和缺点（只能针对一个被适配类）就更加突出。 123456789101112131415161718// ClassAdapter.h@interface ClassAdapter : Adaptee &lt;Target&gt; @end// ClassAdapter.m@implementation ClassAdapter- (void)request &#123;NSLog(@&quot;%s&quot;,__FUNCTION__);[self specificRequest];&#125;- (void)specificRequest &#123;NSLog(@&quot;%s&quot;,__FUNCTION__);[super specificRequest];&#125;@end 而对象适配器ObjectAdapter仅仅重载&lt;Target&gt;协议的request方法。在如何实现Adaptee的specificRequest方法的方式上，跟类适配器的方式完全不同，对象适配器是同过引用方式来实现的，这种方式跟对象适配器方式需要额外的指针开销。 12345678910111213141516171819// ObjectAdapter.m@interface ObjectAdapter ()@property (nonatomic, strong) Adaptee *adaptee;@end@implementation ObjectAdapter- (instancetype)init &#123;self = [super init];if (self) &#123;_adaptee = [[Adaptee alloc] init];&#125;return self;&#125;- (void)request &#123;NSLog(@&quot;%s&quot;,__FUNCTION__);[_adaptee specificRequest];&#125; 区分是哪种适配器模式，只要看适配器类的实现方式就可以区分（继承：类适配器模式，引用：对象适配器模式）。在选择到底使用哪种适配器模式时，可以根据继承和引用的特性来决定当下哪种更加适合使用。","tags":[]},{"title":"Hexo 添加Disqus评论功能","date":"2017-04-18T17:18:36.000Z","path":"2017/04/19/Hexo-添加Disqus评论功能/","text":"Hexo默认支持Disqus评论功能，基本上只有在根目录的配置文件_config.yml，上添加支持就可以了，但更多步骤却在Disqus配置上。 注册Disqus账号到官网上注册账号。 配置Disqus1、在首页，右侧功能栏最底部点击Add Disqus to you site。 2、进入设置shortname，输入框中WebsitName的内容就是shortname，填写对应信息后，下一步。 3、最后一步要填写网站的URL。 配置Hexo修改根目录的_config.yml文件，添加以下内容。其中&lt;shortname&gt;改成自己填写的shortname。 1disqus_shortname: &lt;shortname&gt;","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"GitHub Page 绑定个人域名","date":"2017-04-16T18:14:39.000Z","path":"2017/04/17/GitHub-Page-绑定个人域名/","text":"在GitHub上通过Hexo创建了自己的静态博客，但在网址还是带有GitHub的域名，这样还不够酷，最好就是有自己独特域名。下面就教大家如何让自己博客与自己的域名捆绑一起。sincan.github.io是我GitHub上博客的域名。youwillbe.top 是我购买的域名，相应配置修改为自己的域名。 1、购买个人域名狗爹和阿里云上都可以购买域名。建议去狗爹上买，有优惠码这个理由已经够充足了。购买域名后，到域名管理后台修改DNS服务器为f1g1ns1.dnspod.net和f1g1ns2.dnspod.net（以DNSPod为域名解析来做例子）。 2、添加CNAME文件在你的个人博客仓库的根目录中新建文件CNAME（注意没有后缀）。并输入内容 1youwillbe.top 3、DNS解析DNSPod免费域名解析，不怕被墙。注册完成后，点击添加域名youwillbe.top,然后添加记录，具体如下图所示，其中192.30.252.153和192.30.252.154是Github Pages服务器指定的IP地址，访问该IP地址即表示访问Github Pages。 4、等待生效设置完成后，等待几分钟，然后就可以在浏览器上输入自己的个性域名，并看到自己的博客了。","tags":[]},{"title":"Hexo 部署GitHub repository","date":"2017-04-16T15:23:45.000Z","path":"2017/04/16/Hexo-部署GitHub-repository/","text":"配置环境执行命令 1$ npm install hexo-deployer-git --save 修改根目录下的_config.yml，具体内容如下 123deploy: type: git repo: &lt;repository url&gt; 其中&lt;repository url&gt;为GitHub上的repository。","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"Hexo 添加分类和标签","date":"2017-04-15T17:36:50.000Z","path":"2017/04/16/Hexo-添加分类和标签/","text":"1、让分类和标签功能生效分类功能生效 执行命令 1$ hexo new page &quot;categories&quot; 修改source/categories/index.md中，title字段改为layout。保留date字段和值，添加type: &quot;categories&quot;,其他字段可删除，最终效果可参考下面效果。 123456---layout: categoriesdate: 2017-04-16 01:44:30type: &quot;categories&quot; comments: false--- 标签功能生效 执行命令 1$ hexo new page &quot;tags&quot; 修改source/tags/index.md中，title字段改为layout。保留date字段和值，添加type: &quot;tags&quot;,其他字段可删除，最终效果可参考下面效果。 123456---layout: tagsdate: 2017-04-16 01:44:30type: &quot;tags&quot; comments: false--- 2、文章添加分类与标签第一种方法，针对已存在的文章，头部date字段下增加以下内容 12categories:tags: categories为分类名称，如果多个分类用[分类1，分类2]。 tags为标签名称，如果多个便签用[标签1，便签2] 最终效果如下面： 1234title: 标题名称date: 2017-04-16 01:36:50categories: 分类名称tags: [标签名1，便签名2] 第二种方法，为方便不用每次都手动添加categories和tags，可以修改scaffolds/post.md。 123456---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;categories:tags:--- 这样的话，当新建文章时将自动添加categories和tags。 PS：发现yilia主题中的分类标签中，如果是多个分类的话，第一个分类可以执行，第二个分类会读取不到文件报错Cannot GET categories/XXXXXX。为了大家都可以顺利添加，建议用默认的主题测试。","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"Hexo 添加RSS订阅","date":"2017-04-15T15:47:17.000Z","path":"2017/04/15/Hexo-添加RSS订阅/","text":"1、安装插件终端执行命令。 1$ npm install hexo-generator-feed --save 2、网站添加RSS支持编辑网站根目录下的_config.yml,添加以下代码。 123456789# RSS订阅支持plugin:- hexo-generator-feed# Feed Atomfeed:type: atompath: atom.xmllimit: 20 3、主题添加RSS支持编辑主题的_config.yml，路径为themes/&lt;主题名称&gt;/_config.yml，以下是yilia主题的修改方法,具体方法请查阅各自主题修改方法。 12subnav:rss: &quot;/atom.xml&quot; 4、生成RSS终端执行命令 1hexo g","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"ssh key 创建与使用","date":"2017-04-14T10:15:45.000Z","path":"2017/04/14/ssh-key-创建与使用/","text":"生成ssh key1、终端输入命令。 1$ ssh-keygen -t rsa -C &quot;邮箱&quot; 2、下面信息是询问是否修改文件名和路径，一般都是用默认的，直接回车跳到下一步。 3、下面是询问是否添加密码，一般都是用默认，直接回车。 4、再次输入密码。如果没有就直接回车。 5、最终显示类似一下信息 以上这样就生成一个ssh key了。。 查看ssh key 信息终端输入命令 1$ cat ~/.ssh/id_rsa.pub 如果oschina或者GitHub上需要添加SSH，其中的ssh Value值就是命令返回的信息，具体会显示类似于下面的信息。 多个ssh key使用有时会出现这样的情况，oschina和GitHub分别用不同的ssh key，面对这种情况要如何才能做到呢？下面我们就把这问题给解决了。 1、按照上面的步骤生成第一个ssh key。如果已经生成，跳到下一步。 2、按照“生成ssh key”的步骤，到第二步时，这里不再是回车，而是填入具体的路径，这里可以输入以下内容并执行（只要路径相同，名称跟第一个不一致就可以）。后面步骤不变。 1$ /Users/&lt;用户名&gt;/.ssh/second_id_rsa 3、在终端输入命令，意思是在.ssh文件夹下创建config文件 12$ cd ~/.ssh/$ touch config 4、打开config，复制以下信息填入config文件。其中注意HostName和IdentityFile，分别是填入对应的信息。这里第一个是GitHub的配置，第二个是oschina的配置。 12345678910#github配置Host github.com HostName github.com IdentityFile ~/.ssh/id_rsa User git#gitoschina的配置Host git.oschina.net HostName git.oschina.net IdentityFile ~/.ssh/second_id_rsa User git 5、测试GitHub，如果正常会返回成功的信息。 1$ ssh -T git@github.com 6、测试oschina，如果正常会返回成功的信息。 1$ ssh -T git@git.oschina.net","tags":[{"name":"ssh","slug":"ssh","permalink":"http://yoursite.com/tags/ssh/"}]}]